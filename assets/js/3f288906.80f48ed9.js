"use strict";(self.webpackChunk_freshgum_typedi_docs=self.webpackChunk_freshgum_typedi_docs||[]).push([[747],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(9496);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=s,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,a=new Array(i);a[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:s,a[1]=o;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4316:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(1966),s=(n(9496),n(9613));const i={sidebar_position:3},a="Multiple Services",o={unversionedId:"guide/services/multiple-services",id:"guide/services/multiple-services",title:"Multiple Services",description:"In some scenarios, you may want to store multiple instances of a service",source:"@site/docs/guide/services/multiple-services.md",sourceDirName:"guide/services",slug:"/guide/services/multiple-services",permalink:"/docs/guide/services/multiple-services",draft:!1,editUrl:"https://github.com/freshgum-bubbles/typedi/docs/docs/guide/services/multiple-services.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Services",permalink:"/docs/guide/services/introduction"},next:{title:"Resolution Constraints",permalink:"/docs/guide/services/resolution-constraints"}},l={},c=[],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"multiple-services"},"Multiple Services"),(0,s.kt)("p",null,"In some scenarios, you may want to store multiple instances of a service\nin your container. Using ",(0,s.kt)("inlineCode",{parentName:"p"},"get")," wouldn't accomplish this, as subsequent\ncalls would provide the same instance."),(0,s.kt)("p",null,"However, one important feature of TypeDI is its ability to allow you\nto store multiple values under one ID. ",(0,s.kt)("strong",{parentName:"p"},"Let's explore this below with a quick example.")),(0,s.kt)("p",null,"Let's consider the example of an application which needs to store\ninformation about multiple users. Some users have different roles,\nwhich we'll also need to represent via individual services."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/user.class.ts"',title:'"src/user.class.ts"'},"export class UserService {\n  public readonly role = 'user';\n  constructor(public name: string) {}\n}\n")),(0,s.kt)("p",null,"Now, let's create a ",(0,s.kt)("inlineCode",{parentName:"p"},"ManagerService")," to represent managers.\nManagers should have the ability to perform administrative actions,\nso we'll add a ",(0,s.kt)("inlineCode",{parentName:"p"},"deleteComment")," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/manager-user.class.ts"',title:'"src/manager-user.class.ts"'},"import { User } from './user.class';\n\nexport class Manager extends User {\n  public readonly role = 'manager';\n\n  constructor(public name: string) {\n    super(name);\n  }\n\n  deleteComment(commentId: string) {\n    // ...\n  }\n}\n")),(0,s.kt)("p",null,"To store each user, we'd also want a ",(0,s.kt)("a",{parentName:"p",href:"../tokens/introduction"},"Token")," that we can use to reference them.\nLet's do this below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app.ts"',title:'"src/app.ts"'},"import { Container } from '@freshgum/typedi';\nimport { User } from './user.class';\n\nexport const USER = new Token<User>();\n\nconst joe = new User('Joe');\nconst rick = new ManagerUser('Rick');\n\nfunction addUser(value: User) {\n  Container.set({ id: USER, multiple: true, value, dependencies: [] });\n}\n\naddUser(joe);\naddUser(rick);\n")),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"The advantage of this approach is that it's much easier to keep\ntrack of each service instance, as they're all stored in one\ncontainer.")),(0,s.kt)("p",null,"You'll notice that while we can ",(0,s.kt)("em",{parentName:"p"},"store")," individual users,\nwe can't currently access them. Let's fix that."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app.ts"',title:'"src/app.ts"'},"// ...\n\nfunction getUsers() {\n  // highlight-revision-start\n  return Container.getMany(USER);\n  // highlight-revision-end\n}\n\nconsole.log(getUsers());\n// -> [class User, class ManagerUser]\n")),(0,s.kt)("p",null,"There we go! There's a basic example of how to use multiple services in TypeDI."))}m.isMDXComponent=!0}}]);