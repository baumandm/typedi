"use strict";(self.webpackChunk_typed_inject_website=self.webpackChunk_typed_inject_website||[]).push([[603],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1340:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(1966),i=(n(9496),n(9613));const o={sidebar_position:1},a="Services",s={unversionedId:"guide/services/introduction",id:"guide/services/introduction",title:"Services",description:"Services are one of the core concepts of Dependency Injection.",source:"@site/docs/guide/services/introduction.md",sourceDirName:"guide/services",slug:"/guide/services/introduction",permalink:"/typedi/docs/guide/services/introduction",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide/services/introduction.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Creating Containers",permalink:"/typedi/docs/guide/containers/creating-containers"},next:{title:"Multiple Services",permalink:"/typedi/docs/guide/services/multiple-services"}},c={},l=[{value:"Attaching to Containers",id:"attaching-to-containers",level:2},{value:"Finding our Service",id:"finding-our-service",level:2},{value:"Creating Instances via Factories",id:"creating-instances-via-factories",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"services"},"Services"),(0,i.kt)("p",null,"Services are one of the core concepts of Dependency Injection.\nEach service has a certain responsibility and, when each service is\nbrought together, they power the functionality of your project."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"This page doesn't aim to be an introductory guide to Dependency Injection.")),(0,i.kt)("p",{parentName:"admonition"},"If you're new to the concept, here are some recommended learning resources:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.jamesshore.com/v2/blog/2006/dependency-injection-demystified"},(0,i.kt)("em",{parentName:"a"},'"Dependency Injection Demystified"')," by James Shore")," ",(0,i.kt)("sup",null,(0,i.kt)("a",{parentName:"li",href:"https://web.archive.org/web/20230208150338/https://www.jamesshore.com/v2/blog/2006/dependency-injection-demystified"},"(archive)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://martinfowler.com/articles/injection.html"},(0,i.kt)("em",{parentName:"a"},'"Inversion of Control Containers and the Dependency Injection pattern"')," by Martin Fowler")," ",(0,i.kt)("sup",null,(0,i.kt)("a",{parentName:"li",href:"https://web.archive.org/web/20230406045635/https://martinfowler.com/articles/injection.html"},"(archive)"))))),(0,i.kt)("p",null,"In your typical NodeJS app, you may have the following services:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DatabaseService"),", for handling connections to the app's database."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WebServerService"),", which would handle the instantiation and management of your web server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DiagnosticsService"),", allowing for sending diagnostics to a central service.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"To see what the above server would look like when implemented in TypeDI, check out the ",(0,i.kt)("a",{parentName:"p",href:"../../examples/nodejs-web-server/implementation"},"NodeJS Web Server")," example.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Each service manages ",(0,i.kt)("em",{parentName:"strong"},"one")," part of the application.")),(0,i.kt)("p",null,"Additionally, each service abstracts away implementation logic.\nFor example, if your application makes use of PostgreSQL now, it is most\nlikely possible that you can change the underlying database implementation within ",(0,i.kt)("inlineCode",{parentName:"p"},"DatabaseService"),"\nto support a different database, such as MySQL."),(0,i.kt)("p",null,"TypeDI lets you express services through an expressive decorator-based syntax, which allows you to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Declare any neighbouring services a service depends on"),(0,i.kt)("li",{parentName:"ul"},"Store implementation logic in an easily-readable ES6 class format"),(0,i.kt)("li",{parentName:"ul"},"Provide a public interface for consumers of your service")),(0,i.kt)("p",null,"Let's put that into practice, while also exploring the various ways you can tweak the declaration\nof services to meet various use-cases you may require in your app."),(0,i.kt)("h2",{id:"attaching-to-containers"},"Attaching to Containers"),(0,i.kt)("p",null,"By default, services are attached to the ",(0,i.kt)("a",{parentName:"p",href:"../containers/introduction"},"default container"),".\nHowever, we can tweak this behaviour by introducing an ",(0,i.kt)("strong",{parentName:"p"},"options object")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Service")," decorator.\nLet's explore how our ",(0,i.kt)("a",{parentName:"p",href:"../../examples/hello-world"},"Hello World!")," example could be changed to bind the\nservice to a different container."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/log.service.ts"',title:'"src/log.service.ts"'},"import { Service, Container } from '@typed-inject/injector';\n\n// highlight-revision-start\nexport const container = Container.ofChild('my-new-container');\n// highlight-revision-end\n\n// highlight-revision-start\n@Service({ container }, [])\n// highlight-revision-end\nexport class LogService {\n  public log(message: string) {\n    console.log(message);\n  }\n}\n")),(0,i.kt)("p",null,"What we did there was add an ",(0,i.kt)("em",{parentName:"p"},"options object")," to our service declaration. This gives TypeDI certain\ninstructions on how & why the service should be initialised. In our case, we only changed the container."),(0,i.kt)("h2",{id:"finding-our-service"},"Finding our Service"),(0,i.kt)("p",null,"As we've now moved the ",(0,i.kt)("inlineCode",{parentName:"p"},"LogService")," to a different container, the following will no longer work:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/main.ts"',title:'"src/main.ts"'},"import { Container } from '@typed-inject/injector';\nimport { LogService } from './log.service';\n\n// highlight-next-line-error\nconst logger = Container.get(LogService);\n// highlight-error-comment-start\n//             ^^^^^^^^^^^^^\n//             ServiceNotFoundError:\n//               Service with \"LogService\" identifier was not found in the container.\n// highlight-error-comment-end\n")),(0,i.kt)("p",null,"This is because containers don't search ",(0,i.kt)("em",{parentName:"p"},"upwards"),". This is covered in ",(0,i.kt)("a",{parentName:"p",href:"../containers/introduction#container-inheritance"},"the Containers guide"),"."),(0,i.kt)("p",null,"Instead, what we have to do is use our newly-created container to find the service. Let's update our code above."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/main.ts"',title:'"src/main.ts"'},"import { Container } from '@typed-inject/injector';\n// highlight-revision-start\nimport { LogService, container } from './log.service';\n// highlight-revision-end\n\n// highlight-revision-start\nconst logger = container.get(LogService);\n// highlight-revision-end\n")),(0,i.kt)("p",null,"Perfect!"),(0,i.kt)("h2",{id:"creating-instances-via-factories"},"Creating Instances via Factories"),(0,i.kt)("p",null,"In some cases, you'll want to create a service via a function instead of have TypeDI create it for you.\nFor these cases, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," decorator allows you provide a factory function, which TypeDI will\nuse instead of the ",(0,i.kt)("inlineCode",{parentName:"p"},"new")," operator to create an instance of your service."),(0,i.kt)("p",null,"XXX"))}d.isMDXComponent=!0}}]);