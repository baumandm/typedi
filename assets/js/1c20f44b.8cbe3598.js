"use strict";(self.webpackChunk_typed_inject_website=self.webpackChunk_typed_inject_website||[]).push([[734],{9613:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),h=o,f=u["".concat(c,".").concat(h)]||u[h]||d[h]||i;return t?a.createElement(f,r(r({ref:n},p),{},{components:t})):a.createElement(f,r({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=h;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4693:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(1966),o=(t(9496),t(9613));const i={sidebar_position:2},r="Creating Containers",l={unversionedId:"guide/containers/creating-containers",id:"guide/containers/creating-containers",title:"Creating Containers",description:"TypeDI maintains a global container registry, which is a shared",source:"@site/docs/guide/containers/creating-containers.md",sourceDirName:"guide/containers",slug:"/guide/containers/creating-containers",permalink:"/docs/guide/containers/creating-containers",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide/containers/creating-containers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Custom Containers",permalink:"/docs/guide/containers/custom-containers"},next:{title:"Services",permalink:"/docs/guide/services/introduction"}},c={},s=[{value:"<code>ContainerInstance.of(id, parent?, options?)</code>",id:"containerinstanceofid-parent-options",level:2},{value:"<code>Container.of(id, options?)</code>",id:"containerofid-options",level:2},{value:"<code>Container.ofChild(id, options?)</code>",id:"containerofchildid-options",level:2},{value:"Creation Options",id:"creation-options",level:2},{value:"Dealing with conflicts",id:"dealing-with-conflicts",level:3},{value:"Real-life example of conflict strategies",id:"real-life-example-of-conflict-strategies",level:3},{value:"Dealing with free IDs",id:"dealing-with-free-ids",level:3},{value:"Defining a conflict",id:"defining-a-conflict",level:3}],p={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-containers"},"Creating Containers"),(0,o.kt)("p",null,"TypeDI maintains a global container registry, which is a shared\nregistry of all containers it knows about.",(0,o.kt)("br",{parentName:"p"}),"\n","Aside from ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/containers/custom-containers"},"custom containers"),", all newly-created\ncontainers are added to the registry."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"By default, if a container with the same name already\nexists, it is returned.")),(0,o.kt)("p",null,"There are multiple ways to create a container, each of which\nwill be demonstrated below."),(0,o.kt)("h2",{id:"containerinstanceofid-parent-options"},(0,o.kt)("inlineCode",{parentName:"h2"},"ContainerInstance.of(id, parent?, options?)")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"pathname:///api-reference/classes/ContainerInstance.html#of-2"},(0,o.kt)("sup",null,(0,o.kt)("strong",{parentName:"a"},"API Reference")))),(0,o.kt)("p",null,"The static ",(0,o.kt)("inlineCode",{parentName:"p"},"of")," method can be used to create both orphaned and child containers, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ContainerInstance, Container } from '@typed-inject/injector';\n\n// Create an orphaned container:\nContainerInstance.of('my-new-container', null);\n\n// Create a container as a child of the default container:\nContainerInstance.of('my-second-new-container', Container);\n")),(0,o.kt)("p",null,"If the second parameter, ",(0,o.kt)("inlineCode",{parentName:"p"},"parent"),", is not provided, then it defaults to the default container."),(0,o.kt)("h2",{id:"containerofid-options"},(0,o.kt)("inlineCode",{parentName:"h2"},"Container.of(id, options?)")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"pathname:///api-reference/classes/ContainerInstance.html#of"},(0,o.kt)("sup",null,(0,o.kt)("strong",{parentName:"a"},"API Reference")))),(0,o.kt)("p",null,"The instance method ",(0,o.kt)("inlineCode",{parentName:"p"},"of")," can also be used to create containers,\nin\nXXX"),(0,o.kt)("h2",{id:"containerofchildid-options"},(0,o.kt)("inlineCode",{parentName:"h2"},"Container.ofChild(id, options?)")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"pathname:///api-reference/classes/ContainerInstance.html#ofChild"},(0,o.kt)("sup",null,(0,o.kt)("strong",{parentName:"a"},"API Reference")))),(0,o.kt)("p",null,"The instance ",(0,o.kt)("inlineCode",{parentName:"p"},"ofChild")," method can be used to create a container\nwhich is a child of the current. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Container } from '@typed-inject/injector';\n\n// Create a child of the default container:\nconst newContainer = Container.ofChild('my-new-container');\nassert(newContainer.parent === Container);\n\n// You can also create a child of a child!\nconst newNewContainer = newContainer.ofChild('my-really-new-container');\nassert(newNewContainer.parent === newContainer);\n")),(0,o.kt)("h2",{id:"creation-options"},"Creation Options"),(0,o.kt)("p",null,"In each of the above methods, an options parameter ",(0,o.kt)("a",{parentName:"p",href:"pathname:///api-reference/interfaces/CreateContainerOptions.html"},"of type ",(0,o.kt)("inlineCode",{parentName:"a"},"CreateContainerOptions"))," can optionally be provided.\nThese options dictate how TypeDI should handle certain situations, such as when..."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a container with the ID already exists ",(0,o.kt)("em",{parentName:"li"},"(a conflict)")),(0,o.kt)("li",{parentName:"ul"},"a container with the ID does not exist ",(0,o.kt)("em",{parentName:"li"},"(free)"))),(0,o.kt)("h3",{id:"dealing-with-conflicts"},"Dealing with conflicts"),(0,o.kt)("p",null,"In many situations, you'll want an operation to fail if it means\nit returns a container with the same ID, but with completely different characteristics."),(0,o.kt)("p",null,"Consider the following ",(0,o.kt)("em",{parentName:"p"},"(incorrect)")," example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Create an orphaned container.\nContainerInstance.of('my-container', null);\n\n// Create a child of the default container.\n// highlight-error-comment-start\nContainer.ofChild('my-container');\n// highlight-error-comment-end\n")),(0,o.kt)("p",null,"As the call to ",(0,o.kt)("inlineCode",{parentName:"p"},"ofChild")," specifies an ID which already exists in the container registry,\nthe existing (orphaned) container is returned. In most cases, this ",(0,o.kt)("em",{parentName:"p"},"isn't")," what you want.\nTo remedy this, we can append a list of options to our ",(0,o.kt)("inlineCode",{parentName:"p"},"ofChild")," call to fail if a\ncontainer with the ID already exists."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Create an orphaned container.\nContainerInstance.of('my-container', null);\n\n// Create a child of the default container.\nContainer.ofChild('my-container', {\n  onConflict: 'throw',\n});\n")),(0,o.kt)("p",null,"The above example will throw an error due to the conflicting container IDs.\nThis is one of three ",(0,o.kt)("a",{parentName:"p",href:"pathname:///api-reference/types/ContainerConflictStrategy.html"},"conflict strategies")," you can choose to resolve a conflict."),(0,o.kt)("p",null,"The others are as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"'returnExisting'"),": Return the existing container. This is the default."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"'throw'"),": Throw an error upon conflict."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"'null'"),": Return null upon conflict.`")),(0,o.kt)("p",null,"A better solution would be to restrict the use of well-known string-based keys, replacing\nthem with well-known instances of ",(0,o.kt)("inlineCode",{parentName:"p"},"Symbol"),". Symbols, even with the same name, will never collide."),(0,o.kt)("p",null,"Let's update our example above to make use of Symbols instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const MY_CONTAINER = Symbol('my-container');\nexport const MY_SECOND_CONTAINER = Symbol('my-container');\n\n// Create an orphaned container.\nContainerInstance.of(MY_CONTAINER, null);\n\n// Create a child of the default container.\nContainerInstance.of(MY_SECOND_CONTAINER);\n")),(0,o.kt)("h3",{id:"real-life-example-of-conflict-strategies"},"Real-life example of conflict strategies"),(0,o.kt)("p",null,"Consider the following example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ContainerInstance, Token } from '@typed-inject/injector';\n\n// Keep the container ID local, so other packages have to use\n// our function below to create the container.\nconst VALUE_CONTAINER = Symbol('value');\n\nexport const START_TIME = new Token<number>();\n\nfunction getValueContainer() {\n  const container = ContainerInstance.of(VALUE_CONTAINER, null, {\n    onConflict: 'null',\n  });\n\n  // If we've already created the container, the above call returns null.\n  if (container) {\n    container.setValue(START_TIME, performance.now());\n  }\n\n  // If we've already set up the container, 'container' will be null.\n  // However, we still want to return it here, so we re-get it without a conflict strategy.\n  return container ?? ContainerInstance.of(VALUE_CONTAINER);\n}\n\n// ...\n\nfunction logEvents() {\n  // Get the time when the application started.\n  const startTime = getValueContainer().get(START_TIME);\n  // ...\n}\n")),(0,o.kt)("h3",{id:"dealing-with-free-ids"},"Dealing with free IDs"),(0,o.kt)("p",null,"In some cases, you may not want a container to be created if the ID isn't in use."),(0,o.kt)("p",null,"For argument's sake, let's say your application sets up a container with specific values.\nA good way to ensure the container is always instantiated correctly can be found below."),(0,o.kt)("p",null,"Let's tweak our event-logging example above to incorporate the usage of ",(0,o.kt)("em",{parentName:"p"},"free strategies")," instead."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ContainerInstance, Token } from '@typed-inject/injector';\n\n// Keep the container ID local, so other packages have to use\n// our function below to create the container.\nconst VALUE_CONTAINER = Symbol('value');\n\nexport const START_TIME = new Token<number>();\n\nfunction getValueContainer() {\n  // ...\n}\n\n// ...\n\nfunction logEvents() {\n  // Get the value container.\n  const valueContainer = ContainerInstance.of(VALUE_CONTAINER, null, {\n    onFree: 'null',\n  });\n\n  if (valueContainer === null) {\n    // Oh no! We've forgotten to call `getValueContainer`.\n    return;\n  }\n\n  // Get the time when the application started.\n  const startTime = valueContainer.get(START_TIME);\n  // ...\n}\n")),(0,o.kt)("h3",{id:"defining-a-conflict"},"Defining a conflict"),(0,o.kt)("p",null,"In some cases, your definition of a conflict may differ from TypeDI's default, which\nchecks whether another container with the same ID already exists."),(0,o.kt)("p",null,"In this case, the library helpfully provides a way to define what a conflict ",(0,o.kt)("em",{parentName:"p"},"is"),".\nThis is done through ",(0,o.kt)("a",{parentName:"p",href:"pathname:/api-reference/types/ContainerConflictDefinition.html"},"conflict definitions"),"."),(0,o.kt)("p",null,"Currently, there are two ways to define a conflict:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"'rejectAll'"),": This is the default."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"'allowSameParent'"),": Allow conflicts with containers with the same container to the one provided.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you pass a conflict definition without an accompany strategy,\nby default, TypeDI will throw an error if a conflict arises.")),(0,o.kt)("p",null,"In the case of ",(0,o.kt)("inlineCode",{parentName:"p"},"allowSameParent"),", if a conflict were to arise, TypeDI would check whether\nthe parent of the conflicting container matches the one you expected. If not, the strategy is executed."),(0,o.kt)("p",null,"Let's look at an example below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Container } from '@typed-inject/injector';\n\n// Create a child container of the default container.\nContainer.ofChild('my-new-container');\n\n// Do the same thing again.\nContainer.ofChild('my-new-container', {\n  onConflict: 'throw',\n  conflictDefinition: 'allowSameParent',\n});\n")),(0,o.kt)("p",null,"In the above example, the second call succeeds, even though the specified ID already exists in the registry.\nWithout the explicit conflict definition, the above call would throw."))}d.isMDXComponent=!0}}]);