"use strict";(self.webpackChunk_typed_inject_website=self.webpackChunk_typed_inject_website||[]).push([[156],{9802:(e,n,t)=>{t.d(n,{Z:()=>h});var i=t(9496),a=t(5924),o=t(9262),r=t(8197);const s={admonition:"admonition_bXxR",admonitionHeading:"admonitionHeading_eOF0",admonitionIcon:"admonitionIcon_WPTW",admonitionContent:"admonitionContent_NPED"};const l={note:{infimaClassName:"secondary",iconComponent:function(){return i.createElement("svg",{viewBox:"0 0 14 16"},i.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:i.createElement(r.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return i.createElement("svg",{viewBox:"0 0 12 16"},i.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:i.createElement(r.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return i.createElement("svg",{viewBox:"0 0 12 16"},i.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:i.createElement(r.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return i.createElement("svg",{viewBox:"0 0 14 16"},i.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:i.createElement(r.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return i.createElement("svg",{viewBox:"0 0 16 16"},i.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:i.createElement(r.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")}},c={secondary:"note",important:"info",success:"tip",warning:"danger"};function d(e){const{mdxAdmonitionTitle:n,rest:t}=function(e){const n=i.Children.toArray(e),t=n.find((e=>i.isValidElement(e)&&"mdxAdmonitionTitle"===e.props?.mdxType)),a=i.createElement(i.Fragment,null,n.filter((e=>e!==t)));return{mdxAdmonitionTitle:t,rest:a}}(e.children);return{...e,title:e.title??n,children:t}}function h(e){const{children:n,type:t,title:r,icon:h}=d(e),u=function(e){const n=c[e]??e,t=l[n];return t||(console.warn(`No admonition config found for admonition type "${n}". Using Info as fallback.`),l.info)}(t),p=r??u.label,{iconComponent:m}=u,f=h??i.createElement(m,null);return i.createElement("div",{className:(0,a.Z)(o.k.common.admonition,o.k.common.admonitionType(e.type),"alert",`alert--${u.infimaClassName}`,s.admonition)},i.createElement("div",{className:s.admonitionHeading},i.createElement("span",{className:s.admonitionIcon},f),p),i.createElement("div",{className:s.admonitionContent},n))}},9468:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=t(1966),a=(t(9496),t(9613)),o=t(1362);t(9802);const r={sidebar_position:1},s="Containers",l={unversionedId:"guide/containers/introduction",id:"guide/containers/introduction",title:"Containers",description:"Containers power the majority of TypeDI. They're used to store, retrieve and instantiate services on-the-fly.",source:"@site/docs/guide/containers/introduction.mdx",sourceDirName:"guide/containers",slug:"/guide/containers/introduction",permalink:"/docs/guide/containers/introduction",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide/containers/introduction.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Adding Testing",permalink:"/docs/examples/nodejs-web-server/testing"},next:{title:"Custom Containers",permalink:"/docs/guide/containers/custom-containers"}},c={},d=[{value:"Default Container",id:"default-container",level:2},{value:"Container Inheritance",id:"container-inheritance",level:2},{value:"Creating child containers",id:"creating-child-containers",level:3},{value:"Creating containers with no parent",id:"creating-containers-with-no-parent",level:3},{value:"Disposing a container",id:"disposing-a-container",level:2}],h={toc:d},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,i.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"containers"},"Containers"),(0,a.kt)("p",null,"Containers power the majority of TypeDI. They're used to store, retrieve and instantiate services on-the-fly.\nCrucially, a TypeDI-dependent application must have a container to function."),(0,a.kt)("h2",{id:"default-container"},"Default Container"),(0,a.kt)("p",null,"Thankfully, TypeDI provides one by default, which is aptly named the ",(0,a.kt)("em",{parentName:"p"},"default container"),".\nBy default, services are attached to this, and can be retrieved at any time (like we saw in our ",(0,a.kt)("a",{parentName:"p",href:"/docs/examples/hello-world"},"Hello World!")," example.)"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Throughout this guide, we've assumed services are bound to the default container."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"This isn't always true!")," TypeDI allows you to bind services to different containers.\nRead more about this in ",(0,a.kt)("a",{parentName:"p",href:"../services/introduction#attaching-to-containers"},"the Services section"),".")),(0,a.kt)("p",null,"To get the default container, we just need to import ",(0,a.kt)("inlineCode",{parentName:"p"},"Container")," from TypeDI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Container } from '@typed-inject/injcet';\n")),(0,a.kt)("h2",{id:"container-inheritance"},"Container Inheritance"),(0,a.kt)("p",null,"One of the most powerful features of TypeDI is ",(0,a.kt)("strong",{parentName:"p"},"container inheritance.")),(0,a.kt)("p",null,"To understand how inheritance works, you first have to understand how individual containers work."),(0,a.kt)("p",null,"Each container holds an internal map of services and values. When a service is registered against\na specific container, it's added to that internal registry.  Then, when the service is requested,\nthe container knows how to handle the request."),(0,a.kt)("p",null,"In most circumstances, the service knows how to handle the value itself. However, in some cases, it\nmay have to ask its ",(0,a.kt)("em",{parentName:"p"},"parent"),"."),(0,a.kt)("p",null,"By design, containers can have ",(0,a.kt)("em",{parentName:"p"},"parents"),".  If a container can't find a value itself, it can defer\nthe operation to its parent.  This happens ",(0,a.kt)("strong",{parentName:"p"},"recursively")," until either the value is found somewhere\nin the tree, or an error is thrown once the tree has been exhausted."),(0,a.kt)("p",null,"As a concrete example of this, let's see what happens when we register a service to the default\ncontainer, and then request the service from a newly-created child container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Container, Service } from '@typed-inject/injector';\n\n@Service([ ])\nclass MyService { }\n\nconst childContainer = Container.ofChild('my-new-container');\n\n// highlight-revision-start\nchildContainer.get(MyService);\n// highlight-revision-end\n")),(0,a.kt)("p",null,"The child container didn't know how to resolve that value, so it looked it up in its parent,\nthe defualt container, which ",(0,a.kt)("em",{parentName:"p"},"did"),".  The metadata for that service was then pulled from the parent,\nwith the newly-created instance being stored in the child container and then returned to the caller."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This highlights an important TypeDI design point: ",(0,a.kt)("strong",{parentName:"p"},"service instances are bound to the containers which\ncreated them"),". So, in the above example, even though the child container ",(0,a.kt)("em",{parentName:"p"},"resolved")," the identifier\nvia its parent (the default container), the actual instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"MyService")," was then stored in the child container."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"This is good!"),"  It gives you the flexibility to use services from other containers\nwhile also supplying them with different values.")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"If you're a visual learner, here's a flow-chart of the value resolution process."),(0,a.kt)(o.Z,{value:'\nflowchart\n\t1("A service is requested \nfrom the container.") --\x3e 704938("Lookup the item\nin the container.")\n\t704938 --\x3e 627865{"Was it\nfound?"}\n\t627865 ---|"Yes"| 326567("Return value.")\n\t627865 ---|"No"| 392131{"Does container\nhave parent?"}\n\t392131 ---|"No"| 415873("Throw error.")\n\t392131 ---|"Yes"| 924841("Set container to\nparent container.")\n\t924841 --- 704938\n',mdxType:"Mermaid"})),(0,a.kt)("p",null,"Over the course of our application, we may want to make separate containers for different parts\nof the application.  This will let us compartmentalise values and services under different containers,\nwith each container having a different responsibility."),(0,a.kt)("p",null,"To do this, we have multiple APIs which we will explore below."),(0,a.kt)("h3",{id:"creating-child-containers"},"Creating child containers"),(0,a.kt)("p",null,"As we explored above, all services are bound to the default container by default.\nHowever, one potentially unwanted behaviour in this API is that, if you request\nany identifiers via ",(0,a.kt)("inlineCode",{parentName:"p"},"Container.get")," (or use them as dependencies in a service and then execute that service),\nservice instances would then be cached in the default container."),(0,a.kt)("p",null,"To remedy this, we can create a ",(0,a.kt)("em",{parentName:"p"},"child container")," of the default container, like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Container } from '@typed-inject/injector';\n\n// highlight-revision-start\nconst myNewContainer = Container.ofChild('my-new-container');\n// highlight-revision-end\n")),(0,a.kt)("p",null,"This also lets us immutably extend the default container by adding new services to\nour child container via ",(0,a.kt)("inlineCode",{parentName:"p"},"Container.set"),"."),(0,a.kt)("h3",{id:"creating-containers-with-no-parent"},"Creating containers with no parent"),(0,a.kt)("p",null,"Sometimes, you might ",(0,a.kt)("em",{parentName:"p"},"not")," want to create a container with a parent.\nIn this case, only the values explicitly set in that container (and via ",(0,a.kt)("inlineCode",{parentName:"p"},"@Service")," decorator's ",(0,a.kt)("inlineCode",{parentName:"p"},"container")," option)\nwill be available in the container."),(0,a.kt)("p",null,"Currently, the API provides the following function to achieve this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { ContainerInstance } from '@typed-inject/injector';\n\n// highlight-revision-start\nContainerInstance.of('my-new-container-without-a-parent', null);\n// highlight-revision-end\n")),(0,a.kt)("h2",{id:"disposing-a-container"},"Disposing a container"),(0,a.kt)("p",null,"In many cases, you'll want to get rid of a container once you're finished with it.\nThis might be when you're using individual containers for worker tasks, for example."),(0,a.kt)("p",null,"In this case, you can make use of the container's ",(0,a.kt)("inlineCode",{parentName:"p"},"dispose")," method, which disposes\nof the container asynchronously."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Container } from '@typed-inject/injector';\n\n// Create a new container.\nconst myNewContainer = Container.ofChild('my-new-container');\nmyNewContainer.set({ id: 'my-value', value: 'hello-world', dependencies: [ ] });\n\nmyNewContainer.dispose().then(() => console.log('disposed!'));\n")),(0,a.kt)("p",null,"Once you've disposed a container, it's essentially useless.\nYou won't be able to resolve values from it (even from its parent),\nor perform any other actions."),(0,a.kt)("p",null,"If you try to get a value from a container after you've disposed it,\nTypeDI will throw a runtime error."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"It's typically best not to dispose of the default container.\nUnless you've bound all your services to a different container,\nwithout the default container they're virtually inacessible.")))}p.isMDXComponent=!0}}]);