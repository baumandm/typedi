"use strict";(self.webpackChunk_typed_inject_website=self.webpackChunk_typed_inject_website||[]).push([[463],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||i;return n?o.createElement(m,a(a({ref:t},p),{},{components:n})):o.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6075:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(1966),r=(n(9496),n(9613));const i={sidebar_position:1},a="Tokens",s={unversionedId:"guide/tokens/introduction",id:"guide/tokens/introduction",title:"Tokens",description:"In TypeDI, tokens can be used to create a reference to a static value inside the container.",source:"@site/docs/guide/tokens/introduction.md",sourceDirName:"guide/tokens",slug:"/guide/tokens/introduction",permalink:"/docs/guide/tokens/introduction",draft:!1,editUrl:"https://github.com/freshgum-bubbles/typedi/tree/develop/docs/docs/docs/guide/tokens/introduction.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Eager Services",permalink:"/docs/guide/services/eager-services"},next:{title:"React Bindings",permalink:"/docs/guide/react/introduction"}},l={},c=[{value:"Creating our Token",id:"creating-our-token",level:2},{value:"Consuming our Token",id:"consuming-our-token",level:2},{value:"Setting the value of a Token",id:"setting-the-value-of-a-token",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tokens"},"Tokens"),(0,r.kt)("p",null,"In TypeDI, tokens can be used to create a reference to a static value inside the container.\nThey can then be injected into services as regular dependencies."),(0,r.kt)("p",null,"As an example, let's update our ",(0,r.kt)("a",{parentName:"p",href:"../../examples/hello-world"},"Hello World!")," example to\nprint the value of a token instead of a hard-coded string."),(0,r.kt)("h2",{id:"creating-our-token"},"Creating our Token"),(0,r.kt)("p",null,"First, we'll create a file which holds the token."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'src="app/message.token.ts"',src:'"app/message.token.ts"'},"import { Token } from '@freshgum/typedi';\n\n// highlight-revision-start\nexport const MESSAGE = new Token<string>('The message to print to the console.');\n// highlight-revision-end\n")),(0,r.kt)("p",null,"In TypeDI, tokens are created by making new instances of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Token")," class.\nIt also accepts a type parameter, which sets the type of the value the token points to.\nFinally, a message is also accepted, which is used for debugging purposes within TypeDI."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'As with services, it\'s good practice to name your files according to what they contain.\nAs this file centres around exporting a token, we add a ".token.ts" suffix to the file name.')),(0,r.kt)("h2",{id:"consuming-our-token"},"Consuming our Token"),(0,r.kt)("p",null,"Let's now update our logging service to print the value of the token."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'src="app/log.service.ts"',src:'"app/log.service.ts"'},"import { Service } from '@freshgum/typedi';\nimport { MESSAGE } from './message.token';\n\n// highlight-revision-start\n@Service([MESSAGE])\n// highlight-revision-end\nexport class LogService {\n  // highlight-revision-start\n  constructor(private message: string) {}\n  // highlight-revision-end\n\n  public log() {\n    console.log(this.message);\n  }\n}\n")),(0,r.kt)("p",null,"What we've done is update our ",(0,r.kt)("inlineCode",{parentName:"p"},"LogService")," to consume the newly-created token as a dependency.\nBefore we've created our container, TypeDI doesn't know what the value of the token is."),(0,r.kt)("h2",{id:"setting-the-value-of-a-token"},"Setting the value of a Token"),(0,r.kt)("p",null,"We'll now need to tell TypeDI what the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"MESSAGE")," should be before we create\nour ",(0,r.kt)("inlineCode",{parentName:"p"},"LogService"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For brevity, the ",(0,r.kt)("inlineCode",{parentName:"p"},"RootService")," service in the example is skipped here.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/main.ts"',title:'"src/main.ts"'},"import { Container } from '@freshgum/typedi';\nimport { LogService } from './log.service';\nimport { MESSAGE } from './message.token';\n\n// highlight-revision-start\nContainer.set({ id: MESSAGE, value: 'Hello World!', dependencies: [] });\n// highlight-revision-end\n\nContainer.get(LogService).log();\n")),(0,r.kt)("p",null,"If we now run our code, we'll see the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ ts-node ./src/main.ts\nHello World!\n")),(0,r.kt)("admonition",{title:"Did you know...",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In TypeDI, tokens aren't treated specially. In fact, the implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"Token")," is quite literally:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class Token<T> {\n  constructor(public name?: string) {}\n}\n"))))}d.isMDXComponent=!0}}]);