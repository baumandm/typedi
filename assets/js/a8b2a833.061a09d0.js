"use strict";(self.webpackChunk_freshgum_typedi_docs=self.webpackChunk_freshgum_typedi_docs||[]).push([[120],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6136:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(1966),o=(n(9496),n(9613));const i={sidebar_position:1},a="Hello World!",l={unversionedId:"examples/hello-world",id:"examples/hello-world",title:"Hello World!",description:'The most basic application you can write is one which logs "Hello World!" and then exits.',source:"@site/docs/examples/hello-world.md",sourceDirName:"examples",slug:"/examples/hello-world",permalink:"/docs/examples/hello-world",draft:!1,editUrl:"https://github.com/freshgum-bubbles/typedi/docs/docs/examples/hello-world.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Examples"},next:{title:"NodeJS Web Server",permalink:"/docs/examples/nodejs-web-server/implementation"}},s={},c=[{value:"Creating your First Service",id:"creating-your-first-service",level:2},{value:"The Root Service",id:"the-root-service",level:2},{value:"Using the Container",id:"using-the-container",level:2},{value:"Running our New App",id:"running-our-new-app",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hello-world"},"Hello World!"),(0,o.kt)("p",null,'The most basic application you can write is one which logs "Hello World!" and then exits.\nTo give a basic demonstration of how TypeDI works, this is what we\'ll be doing today.'),(0,o.kt)("p",null,"To start, you'll want to make sure you've followed the instructions in ",(0,o.kt)("a",{parentName:"p",href:"../getting-started"},"Getting Started"),".\nThis will make sure you have a functioning environment to test TypeDI in."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To run the examples below, you'll also want ",(0,o.kt)("a",{parentName:"p",href:"https://npmjs.org/ts-node"},"ts-node")," installed.\nThis will let us run TypeScript code without having to transpile it beforehand."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"npm2yarn",npm2yarn:!0},"npm install -g ts-node\n")),(0,o.kt)("p",{parentName:"admonition"},"It's installed globally so it can be run from the command line, like ",(0,o.kt)("inlineCode",{parentName:"p"},"ts-node main.ts"),".")),(0,o.kt)("h2",{id:"creating-your-first-service"},"Creating your First Service"),(0,o.kt)("p",null,"To begin, you'll want to create your ",(0,o.kt)("inlineCode",{parentName:"p"},"log.service.ts")," file, which will contain the application logic to\nlog messages to the console. We'll then use this service later on to log a message!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/log.service.ts"',title:'"src/log.service.ts"'},"import { Service } from '@freshgum/typedi';\n\n@Service([])\nexport class LogService {\n  public log(message: string) {\n    console.log(message);\n  }\n}\n")),(0,o.kt)("p",null,"What we just did there was:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Declare a service named ",(0,o.kt)("inlineCode",{parentName:"li"},"LogService"),","),(0,o.kt)("li",{parentName:"ul"},"Tell TypeDI it has no dependencies on other services,"),(0,o.kt)("li",{parentName:"ul"},"Create a method on the service to log messages.")),(0,o.kt)("p",null,"Dependencies are a core concept of TypeDI, and Dependency Injection in general: ",(0,o.kt)("em",{parentName:"p"},"services can depend on other services!"),"\nThis lets us abstract our application logic away and place it into a neat little service, which we just did above."),(0,o.kt)("h2",{id:"the-root-service"},"The Root Service"),(0,o.kt)("p",null,'A typical convention in Dependency Injection is to create a "root service", which initialises other\nservices and ensures the environment is ready for them. Typically, an application will then call\na method on the root service to run the application.'),(0,o.kt)("p",null,"In our ",(0,o.kt)("inlineCode",{parentName:"p"},"root.service.ts")," file, we'll be doing just that."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/root.service.ts"',title:'"src/root.service.ts"'},"import { Service } from '@freshgum/typedi';\n\n@Service([LogService])\nexport class RootService {\n  public constructor(private logger: LogService) {}\n\n  run() {\n    this.logger.log('Hello World!');\n  }\n}\n")),(0,o.kt)("p",null,"We just declared a service named ",(0,o.kt)("inlineCode",{parentName:"p"},"RootService"),", which depends on the ",(0,o.kt)("inlineCode",{parentName:"p"},"LogService")," to log a message to the console.\nWe've told TypeDI our ",(0,o.kt)("inlineCode",{parentName:"p"},"RootService")," depends on the ",(0,o.kt)("inlineCode",{parentName:"p"},"LogService")," through the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Service")," decorator, which is a fundamental\npart of the library. With it, you can declare services with a multitude of different configurations (but we'll get into that later)."),(0,o.kt)("h2",{id:"using-the-container"},"Using the Container"),(0,o.kt)("p",null,"Finally, to put everything together, we'll create a nice ",(0,o.kt)("inlineCode",{parentName:"p"},"main.ts")," file which starts the ",(0,o.kt)("inlineCode",{parentName:"p"},"RootService")," and calls its ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/main.ts"',title:'"src/main.ts"'},"import { Container } from '@freshgum/typedi';\nimport { RootService } from './root.service';\n\nconst rootService = Container.get(RootService);\nrootService.run();\n")),(0,o.kt)("h2",{id:"running-our-new-app"},"Running our New App"),(0,o.kt)("p",null,"If you set up ",(0,o.kt)("inlineCode",{parentName:"p"},"ts-node")," as advised above, it'll be as simple as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ ts-node ./src/main.ts\nHello World!\n")),(0,o.kt)("p",null,"I hear the questions already:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Wait... what? You gave it the name of the class, and it magically created an instance with the required dependencies?"),(0,o.kt)("p",{parentName:"blockquote"},"How does that work?")),(0,o.kt)("p",null,"Fear not! How TypeDI works is covered in the ",(0,o.kt)("a",{parentName:"p",href:"../guide/containers/introduction"},"Learning TypeDI")," section."))}d.isMDXComponent=!0}}]);