"use strict";(self.webpackChunk_typed_inject_website=self.webpackChunk_typed_inject_website||[]).push([[674],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,v=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(v,o(o({ref:t},c),{},{components:n})):r.createElement(v,o({ref:t},c))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3802:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(1966),a=(n(9496),n(9613));const i={sidebar_position:2,sidebar_class_name:"sidebar_doc_incomplete"},o="NodeJS Web Server",s={unversionedId:"examples/nodejs-web-server/implementation",id:"examples/nodejs-web-server/implementation",title:"NodeJS Web Server",description:"In the Services section, we talk about an implementation",source:"@site/docs/examples/nodejs-web-server/implementation.md",sourceDirName:"examples/nodejs-web-server",slug:"/examples/nodejs-web-server/implementation",permalink:"/docs/examples/nodejs-web-server/implementation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/nodejs-web-server/implementation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_class_name:"sidebar_doc_incomplete"},sidebar:"tutorialSidebar",previous:{title:"Hello World!",permalink:"/docs/examples/hello-world"},next:{title:"Stopping Our App",permalink:"/docs/examples/nodejs-web-server/application-disposal"}},l={},p=[{value:"Creating our Web Server Service",id:"creating-our-web-server-service",level:2},{value:"Creating our <code>RootService</code>",id:"creating-our-rootservice",level:2},{value:"Adding a database",id:"adding-a-database",level:2},{value:"Updating our <code>WebServerService</code>",id:"updating-our-webserverservice",level:3}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nodejs-web-server"},"NodeJS Web Server"),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"../../guide/services/introduction"},"the Services section"),", we talk about an implementation\nof a simple web server in TypeDI, through NodeJS and TypeScript."),(0,a.kt)("p",null,"The server would declare the following services:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DatabaseService"),", for handling connections to the app's database."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WebServerService"),", which would handle the instantiation and management of your web server.")),(0,a.kt)("p",null,"In this example, we're going to look at implementing that server."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"To run the examples below, you'll also want ",(0,a.kt)("a",{parentName:"p",href:"https://npmjs.org/ts-node"},"ts-node")," installed.\nThis will let us run TypeScript code without having to transpile it beforehand."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"npm2yarn",npm2yarn:!0},"npm install -g ts-node\n")),(0,a.kt)("p",{parentName:"admonition"},"It's installed globally so it can be run from the command line, like ",(0,a.kt)("inlineCode",{parentName:"p"},"ts-node main.ts"),".")),(0,a.kt)("h2",{id:"creating-our-web-server-service"},"Creating our Web Server Service"),(0,a.kt)("p",null,"The main part of our application is going to consist of a web-server and, as such,\nthat's what we're going to implement first."),(0,a.kt)("p",null,"To start, let's create a ",(0,a.kt)("inlineCode",{parentName:"p"},"webserver.service.ts")," which contains the logic for deploying the server,\nresponding to requests, and closing the server."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/webserver.service.ts"',title:'"src/webserver.service.ts"'},"import { Service } from '@typed-inject/injector';\nimport http, { Server, IncomingMessage, ServerResponse } from 'http'; // Node's HTTP module.\n\n@Service([])\nexport class WebServerService {\n  private server!: Server;\n\n  async startServer() {\n    if (this.server?.listening) {\n      return null;\n    }\n\n    const server = this.createServer();\n\n    // Listen for connections on port 8080.\n    // Make sure this isn't taken when you run the example!\n    return server.listen(8080);\n  }\n\n  protected createServer() {\n    return http.createServer((request, response) => this.handleRequest(request, response));\n  }\n\n  protected handleRequest(request: IncomingMessage, response: ServerResponse<IncomingMessage>) {\n    switch (response.url) {\n      case '/hello':\n        response.writeHead(200);\n        response.end('Hello!');\n        break;\n\n      default:\n        response.writeHead(404);\n        response.end('Not Found');\n        break;\n    }\n  }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"WebServerService")," supports the creation of the server and management of requests.\nThis lets it respond to HTTP requests from users."),(0,a.kt)("p",null,"This is a good start, ",(0,a.kt)("em",{parentName:"p"},"but we're not done yet...")),(0,a.kt)("h2",{id:"creating-our-rootservice"},"Creating our ",(0,a.kt)("inlineCode",{parentName:"h2"},"RootService")),(0,a.kt)("p",null,"To make our example run, we'll need something called a ",(0,a.kt)("em",{parentName:"p"},"root service"),".\nThis service will depend on our web server and start it."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"While not explicitly required, the root service pattern is recommended for applications.\nIt keeps your application initialisation code inside the context of a DI container, with\nas little as possible outside it.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/root.service.ts"',title:'"src/root.service.ts"'},"import { Service, Container } from '@typed-inject/injector';\nimport { WebServerService } from './webserver.service';\n\n@Service([WebServerService])\nexport class RootService {\n  constructor(private webServer: WebServerService) {}\n\n  async bootstrap() {\n    return this.webServer.startServer();\n  }\n}\n\n// If we're being run as \"$ ts-node root.service.ts\", start the server automatically.\nif (require.main === module) {\n  const rootService = Container.get(RootService);\n  rootService.bootstrap().then(() => console.log('Web server online!'));\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Let's run our app!")," Run the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ ts-node ./root.service.ts\n")),(0,a.kt)("p",null,"Now, navigate to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/hello")," and examine your work :-)"),(0,a.kt)("h2",{id:"adding-a-database"},"Adding a database"),(0,a.kt)("p",null,"As with any modern web application, we'll need a way to store inputs from users and then\noutput them at a later date. To do this, we'll be using a database."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"This section is skippable.")),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"We won't be setting up a database here.")," The example below makes use of a map to keep the example simple.")),(0,a.kt)("p",null,"We'll achieve this through a service which will read and write to an in-memory database.\nTo make it easier to migrate to an out-of-process database like SQLite later on, we'll also\nmake the APIs for reading and writing data asynchronous."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/database.service.ts"',title:'"src/database.service.ts"'},"import { Service } from '@typed-inject/injector';\n\n@Service([ ])\nexport const DatabaseService {\n  private _map = new Map<string, string>();\n\n  async read (key: string) {\n    this._map.get(key);\n  }\n\n  async write (key: string, value: string) {\n    this._map.set(key, value);\n  }\n}\n")),(0,a.kt)("h3",{id:"updating-our-webserverservice"},"Updating our ",(0,a.kt)("inlineCode",{parentName:"h3"},"WebServerService")),(0,a.kt)("p",null,"Now we have a database, we can update the web server to read and write values to it."),(0,a.kt)("p",null,"Let's update our web-server service with two new routes: one for reading a value, and another for writing it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/webserver.service.ts"',title:'"src/webserver.service.ts"'},"// ...\n// highlight-revision-start\nimport { DatabaseService } from './database.service';\n// highlight-revision-end\n\n// highlight-revision-start\n@Service([DatabaseService])\n// highlight-revision-end\nclass WebServerService {\n  // ...\n\n  // highlight-revision-start\n  constructor(private database: DatabaseService) {}\n  // highlight-revision-end\n\n  protected handleRequest(request: IncomingMessage, response: ServerResponse<IncomingMessage>) {\n    // highlight-revision-start\n    const { searchParams: params } = new URL(request.url ?? '');\n    // highlight-revision-end\n\n    switch (response.url) {\n      case '/hello':\n        response.writeHead(200);\n        // highlight-revision-start\n        this.database.get('name').then(name => {\n          response.end(`Hello, ${name ?? 'unknown person'}!`);\n        });\n        // highlight-revision-end\n        break;\n\n      case '/setname':\n        response.writeHead(200);\n        // highlight-revision-start\n        this.database.set('name', params.name).then(() => {\n          response.end(`Hello, ${params.name}!`);\n        });\n        // highlight-revision-end\n        break;\n\n      default:\n        response.writeHead(404);\n        response.end('Not Found');\n        break;\n    }\n  }\n  // ...\n}\n")),(0,a.kt)("p",null,"Now, we've got a functioning web-server which can store the user's name in memory.\nTry running the updated version, like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ ts-node ./root.service.ts\n")),(0,a.kt)("p",null,"Now, when we tell the server our name with ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/setname?name=Joe"),",\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"/hello")," endpoint will address you by name! \ud83c\udf89"),(0,a.kt)("h2",{id:""}))}m.isMDXComponent=!0}}]);